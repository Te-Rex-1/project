from ultralytics import YOLO
import cv2
import cvzone
import math
import time

# Initialize video capture
cap = cv2.VideoCapture(0)  # For Webcam
cap.set(3, 1280)
cap.set(4, 720)
# cap = cv2.VideoCapture("Video/tesVideo.mp4")  # For Video

# Check if the webcam is opened correctly
if not cap.isOpened():
    print("Error: Could not open video capture.")
    exit()

# Load YOLO model
try:
    model = YOLO("../Yolo-Weights/yolov8l.pt")
except Exception as e:
    print(f"Error loading model: {e}")
    exit()

# Class names
classNames = ["person", "bicycle", "car", "motorbike", "aeroplane", "bus", "train", "truck", "boat",
              "traffic light", "fire hydrant", "stop sign", "parking meter", "bench", "bird", "cat",
              "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe", "backpack", "umbrella",
              "handbag", "tie", "suitcase", "frisbee", "skis", "snowboard", "sports ball", "kite", "baseball bat",
              "baseball glove", "skateboard", "surfboard", "tennis racket", "bottle", "wine glass", "cup",
              "fork", "knife", "spoon", "bowl", "banana", "apple", "sandwich", "orange", "broccoli",
              "carrot", "hot dog", "pizza", "donut", "cake", "chair", "sofa", "pottedplant", "bed",
              "diningtable", "toilet", "tvmonitor", "laptop", "mouse", "remote", "keyboard", "cell phone",
              "microwave", "oven", "toaster", "sink", "refrigerator", "book", "clock", "vase", "scissors",
              "teddy bear", "hair drier", "toothbrush"]

prev_frame_time = 0
new_frame_time = 0

while True:
    new_frame_time = time.time()
    success, img = cap.read()
    if not success:
        print("Error: Could not read frame.")
        break

    # Perform inference
    try:
        results = model(img, stream=True)
    except Exception as e:
        print(f"Error during model inference: {e}")
        continue

    for r in results:
        boxes = r.boxes
        for box in boxes:
            # Bounding Box
            try:
                x1, y1, x2, y2 = box.xyxy[0]
                x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)
            except Exception as e:
                print(f"Error extracting bounding box: {e}")
                continue

            w, h = x2 - x1, y2 - y1
            cvzone.cornerRect(img, (x1, y1, w, h))

            # Confidence
            try:
                conf = math.ceil((box.conf[0] * 100)) / 100
            except Exception as e:
                print(f"Error extracting confidence: {e}")
                continue

            # Class Name
            try:
                cls = int(box.cls[0])
                cvzone.putTextRect(img, f'{classNames[cls]} {conf}', (max(0, x1), max(35, y1)), scale=1, thickness=1)
            except Exception as e:
                print(f"Error extracting class name: {e}")
                continue

    fps = 1 / (new_frame_time - prev_frame_time)
    prev_frame_time = new_frame_time
    print(f'FPS: {fps:.2f}')

    # Display the frame
    try:
        cv2.imshow("Image", img)
    except cv2.error as e:
        print(f"Error displaying image: {e}")
        break

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
